(*****************************************************************************)
(*                                                                           *)
(*                                                                           *)
(*  Copyright (C) 2025                                                       *)
(*    Gabriel Santamaria                                                     *)
(*                                                                           *)
(*                                                                           *)
(*  Licensed under the Apache License, Version 2.0 (the "License");          *)
(*  you may not use this file except in compliance with the License.         *)
(*  You may obtain a copy of the License at                                  *)
(*                                                                           *)
(*    http://www.apache.org/licenses/LICENSE-2.0                             *)
(*                                                                           *)
(*  Unless required by applicable law or agreed to in writing, software      *)
(*  distributed under the License is distributed on an "AS IS" BASIS,        *)
(*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *)
(*  See the License for the specific language governing permissions and      *)
(*  limitations under the License.                                           *)
(*                                                                           *)
(*****************************************************************************)

(* Theses tests cases were generated by a Python script to test the cosine_sum
   window agaisn't SciPy's implementation *)

open Soundml

let f32_nx_testable = Tutils.tensor_testable ~rtol:10e-6 ~atol:10e-6

let f64_nx_testable = Tutils.tensor_testable ~rtol:10e-6 ~atol:10e-6

let test_m_negative_0 () =
  Alcotest.check_raises "m_negative: M < 0 should raise Invalid_argument"
    (Invalid_argument "Window length M must be a non-negative integer")
    (fun () -> ignore (Window.cosine_sum ~fftbins:false Float32 [|1.0|] (-1)) )

let test_m_zero_f32_1 () =
  let expected = Nx.empty Float32 [|0|] in
  let actual = Window.cosine_sum ~fftbins:false Float32 [|1.0|] 0 in
  Alcotest.check f32_nx_testable "m_zero_f32: M = 0, empty array" expected
    actual

let test_m_zero_f64_2 () =
  let expected = Nx.empty Float64 [|0|] in
  let actual = Window.cosine_sum ~fftbins:true Float64 [||] 0 in
  Alcotest.check f64_nx_testable "m_zero_f64: M = 0, empty array" expected
    actual

let test_m_one_f32_3 () =
  let expected = Nx.ones Float32 [|1|] in
  let actual = Window.cosine_sum ~fftbins:false Float32 [|1.0|] 1 in
  Alcotest.check f32_nx_testable "m_one_f32: M = 1, ones array" expected actual

let test_m_one_f64_varied_coeffs_4 () =
  let expected = Nx.ones Float64 [|1|] in
  let actual = Window.cosine_sum ~fftbins:true Float64 [|0.5; 0.5|] 1 in
  Alcotest.check f64_nx_testable "m_one_f64_varied_coeffs: M = 1, ones array"
    expected actual

let test_sym_m5_a1_f32_5 () =
  let expected_values =
    [| 1.00000000e+00
     ; 1.00000000e+00
     ; 1.00000000e+00
     ; 1.00000000e+00
     ; 1.00000000e+00 |]
  in
  let expected = Nx.create Float32 [|5|] expected_values in
  let actual = Window.cosine_sum ~fftbins:false Float32 [|1.0|] 5 in
  Alcotest.check f32_nx_testable
    "sym_m5_a1_f32: M = 5, coeffs_a = [np.float64(1.0)], fftbins = False"
    expected actual

let test_sym_m10_a_half_half_f64_6 () =
  let expected_values =
    [| 0.00000000e+00
     ; 1.16977778e-01
     ; 4.13175911e-01
     ; 7.50000000e-01
     ; 9.69846310e-01
     ; 9.69846310e-01
     ; 7.50000000e-01
     ; 4.13175911e-01
     ; 1.16977778e-01
     ; 0.00000000e+00 |]
  in
  let expected = Nx.create Float64 [|10|] expected_values in
  let actual = Window.cosine_sum ~fftbins:false Float64 [|0.5; 0.5|] 10 in
  Alcotest.check f64_nx_testable
    "sym_m10_a_half_half_f64: M = 10, coeffs_a = [np.float64(0.5), \
     np.float64(0.5)], fftbins = False"
    expected actual

let test_sym_m8_a_hamm_like_f32_7 () =
  let expected_values =
    [| 7.99999982e-02
     ; 2.53194690e-01
     ; 6.42359614e-01
     ; 9.54445660e-01
     ; 9.54445660e-01
     ; 6.42359614e-01
     ; 2.53194690e-01
     ; 7.99999982e-02 |]
  in
  let expected = Nx.create Float32 [|8|] expected_values in
  let actual = Window.cosine_sum ~fftbins:false Float32 [|0.54; 0.46|] 8 in
  Alcotest.check f32_nx_testable
    "sym_m8_a_hamm_like_f32: M = 8, coeffs_a = [np.float64(0.54), \
     np.float64(0.46)], fftbins = False"
    expected actual

let test_sym_m7_a_multi_f64_8 () =
  let expected_values =
    [| 8.50000000e-01
     ; 8.75000000e-01
     ; 1.07500000e+00
     ; 1.25000000e+00
     ; 1.07500000e+00
     ; 8.75000000e-01
     ; 8.50000000e-01 |]
  in
  let expected = Nx.create Float64 [|7|] expected_values in
  let actual = Window.cosine_sum ~fftbins:false Float64 [|1.0; 0.2; 0.05|] 7 in
  Alcotest.check f64_nx_testable
    "sym_m7_a_multi_f64: M = 7, coeffs_a = [np.float64(1.0), np.float64(0.2), \
     np.float64(0.05)], fftbins = False"
    expected actual

let test_sym_m6_a_empty_f32_9 () =
  let expected_values =
    [| 0.00000000e+00
     ; 0.00000000e+00
     ; 0.00000000e+00
     ; 0.00000000e+00
     ; 0.00000000e+00
     ; 0.00000000e+00 |]
  in
  let expected = Nx.create Float32 [|6|] expected_values in
  let actual = Window.cosine_sum ~fftbins:false Float32 [||] 6 in
  Alcotest.check f32_nx_testable
    "sym_m6_a_empty_f32: M = 6, coeffs_a = [], fftbins = False" expected actual

let test_per_m5_a1_f32_10 () =
  let expected_values =
    [| 1.00000000e+00
     ; 1.00000000e+00
     ; 1.00000000e+00
     ; 1.00000000e+00
     ; 1.00000000e+00 |]
  in
  let expected = Nx.create Float32 [|5|] expected_values in
  let actual = Window.cosine_sum ~fftbins:true Float32 [|1.0|] 5 in
  Alcotest.check f32_nx_testable
    "per_m5_a1_f32: M = 5, coeffs_a = [np.float64(1.0)], fftbins = True"
    expected actual

let test_per_m10_a_half_half_f64_11 () =
  let expected_values =
    [| 0.00000000e+00
     ; 9.54915028e-02
     ; 3.45491503e-01
     ; 6.54508497e-01
     ; 9.04508497e-01
     ; 1.00000000e+00
     ; 9.04508497e-01
     ; 6.54508497e-01
     ; 3.45491503e-01
     ; 9.54915028e-02 |]
  in
  let expected = Nx.create Float64 [|10|] expected_values in
  let actual = Window.cosine_sum ~fftbins:true Float64 [|0.5; 0.5|] 10 in
  Alcotest.check f64_nx_testable
    "per_m10_a_half_half_f64: M = 10, coeffs_a = [np.float64(0.5), \
     np.float64(0.5)], fftbins = True"
    expected actual

let test_per_m8_a_hamm_like_f32_12 () =
  let expected_values =
    [| 7.99999982e-02
     ; 2.14730874e-01
     ; 5.40000021e-01
     ; 8.65269125e-01
     ; 1.00000000e+00
     ; 8.65269125e-01
     ; 5.40000021e-01
     ; 2.14730874e-01 |]
  in
  let expected = Nx.create Float32 [|8|] expected_values in
  let actual = Window.cosine_sum ~fftbins:true Float32 [|0.54; 0.46|] 8 in
  Alcotest.check f32_nx_testable
    "per_m8_a_hamm_like_f32: M = 8, coeffs_a = [np.float64(0.54), \
     np.float64(0.46)], fftbins = True"
    expected actual

let test_per_m7_a_multi_f64_13 () =
  let expected_values =
    [| 8.50000000e-01
     ; 8.64175993e-01
     ; 9.99455743e-01
     ; 1.21136826e+00
     ; 1.21136826e+00
     ; 9.99455743e-01
     ; 8.64175993e-01 |]
  in
  let expected = Nx.create Float64 [|7|] expected_values in
  let actual = Window.cosine_sum ~fftbins:true Float64 [|1.0; 0.2; 0.05|] 7 in
  Alcotest.check f64_nx_testable
    "per_m7_a_multi_f64: M = 7, coeffs_a = [np.float64(1.0), np.float64(0.2), \
     np.float64(0.05)], fftbins = True"
    expected actual

let test_per_m6_a_empty_f64_14 () =
  let expected_values =
    [| 0.00000000e+00
     ; 0.00000000e+00
     ; 0.00000000e+00
     ; 0.00000000e+00
     ; 0.00000000e+00
     ; 0.00000000e+00 |]
  in
  let expected = Nx.create Float64 [|6|] expected_values in
  let actual = Window.cosine_sum ~fftbins:true Float64 [||] 6 in
  Alcotest.check f64_nx_testable
    "per_m6_a_empty_f64: M = 6, coeffs_a = [], fftbins = True" expected actual

let test_sym_m64_a_rect_plus_cosine_f32_15 () =
  let expected_values =
    [| 6.99999988e-01
     ; 7.01490760e-01
     ; 7.05948234e-01
     ; 7.13328183e-01
     ; 7.23557115e-01
     ; 7.36533523e-01
     ; 7.52128363e-01
     ; 7.70186663e-01
     ; 7.90528953e-01
     ; 8.12953055e-01
     ; 8.37236106e-01
     ; 8.63136828e-01
     ; 8.90397668e-01
     ; 9.18747842e-01
     ; 9.47905540e-01
     ; 9.77580965e-01
     ; 1.00747919e+00
     ; 1.03730309e+00
     ; 1.06675625e+00
     ; 1.09554601e+00
     ; 1.12338614e+00
     ; 1.14999998e+00
     ; 1.17512310e+00
     ; 1.19850576e+00
     ; 1.21991551e+00
     ; 1.23913980e+00
     ; 1.25598729e+00
     ; 1.27029061e+00
     ; 1.28190780e+00
     ; 1.29072320e+00
     ; 1.29664922e+00
     ; 1.29962707e+00
     ; 1.29962707e+00
     ; 1.29664922e+00
     ; 1.29072320e+00
     ; 1.28190780e+00
     ; 1.27029061e+00
     ; 1.25598729e+00
     ; 1.23913980e+00
     ; 1.21991551e+00
     ; 1.19850576e+00
     ; 1.17512310e+00
     ; 1.14999998e+00
     ; 1.12338614e+00
     ; 1.09554601e+00
     ; 1.06675625e+00
     ; 1.03730309e+00
     ; 1.00747919e+00
     ; 9.77580965e-01
     ; 9.47905540e-01
     ; 9.18747842e-01
     ; 8.90397668e-01
     ; 8.63136828e-01
     ; 8.37236106e-01
     ; 8.12953055e-01
     ; 7.90528953e-01
     ; 7.70186663e-01
     ; 7.52128363e-01
     ; 7.36533523e-01
     ; 7.23557115e-01
     ; 7.13328183e-01
     ; 7.05948234e-01
     ; 7.01490760e-01
     ; 6.99999988e-01 |]
  in
  let expected = Nx.create Float32 [|64|] expected_values in
  let actual = Window.cosine_sum ~fftbins:false Float32 [|1.0; 0.3|] 64 in
  Alcotest.check f32_nx_testable
    "sym_m64_a_rect_plus_cosine_f32: M = 64, coeffs_a = [np.float64(1.0), \
     np.float64(0.3)], fftbins = False"
    expected actual

let test_per_m64_a_rect_plus_cosine_f64_16 () =
  let expected_values =
    [| 7.00000000e-01
     ; 7.01444582e-01
     ; 7.05764416e-01
     ; 7.12917899e-01
     ; 7.22836140e-01
     ; 7.35423621e-01
     ; 7.50559116e-01
     ; 7.68096864e-01
     ; 7.87867966e-01
     ; 8.09682015e-01
     ; 8.33328930e-01
     ; 8.58580979e-01
     ; 8.85194970e-01
     ; 9.12914597e-01
     ; 9.41472903e-01
     ; 9.70594858e-01
     ; 1.00000000e+00
     ; 1.02940514e+00
     ; 1.05852710e+00
     ; 1.08708540e+00
     ; 1.11480503e+00
     ; 1.14141902e+00
     ; 1.16667107e+00
     ; 1.19031799e+00
     ; 1.21213203e+00
     ; 1.23190314e+00
     ; 1.24944088e+00
     ; 1.26457638e+00
     ; 1.27716386e+00
     ; 1.28708210e+00
     ; 1.29423558e+00
     ; 1.29855542e+00
     ; 1.30000000e+00
     ; 1.29855542e+00
     ; 1.29423558e+00
     ; 1.28708210e+00
     ; 1.27716386e+00
     ; 1.26457638e+00
     ; 1.24944088e+00
     ; 1.23190314e+00
     ; 1.21213203e+00
     ; 1.19031799e+00
     ; 1.16667107e+00
     ; 1.14141902e+00
     ; 1.11480503e+00
     ; 1.08708540e+00
     ; 1.05852710e+00
     ; 1.02940514e+00
     ; 1.00000000e+00
     ; 9.70594858e-01
     ; 9.41472903e-01
     ; 9.12914597e-01
     ; 8.85194970e-01
     ; 8.58580979e-01
     ; 8.33328930e-01
     ; 8.09682015e-01
     ; 7.87867966e-01
     ; 7.68096864e-01
     ; 7.50559116e-01
     ; 7.35423621e-01
     ; 7.22836140e-01
     ; 7.12917899e-01
     ; 7.05764416e-01
     ; 7.01444582e-01 |]
  in
  let expected = Nx.create Float64 [|64|] expected_values in
  let actual = Window.cosine_sum ~fftbins:true Float64 [|1.0; 0.3|] 64 in
  Alcotest.check f64_nx_testable
    "per_m64_a_rect_plus_cosine_f64: M = 64, coeffs_a = [np.float64(1.0), \
     np.float64(0.3)], fftbins = True"
    expected actual

let test_sym_m5_a_one_zero_f32_17 () =
  let expected_values =
    [| 1.50000000e+00
     ; 5.00000000e-01
     ; 1.50000000e+00
     ; 5.00000000e-01
     ; 1.50000000e+00 |]
  in
  let expected = Nx.create Float32 [|5|] expected_values in
  let actual = Window.cosine_sum ~fftbins:false Float32 [|1.0; 0.0; 0.5|] 5 in
  Alcotest.check f32_nx_testable
    "sym_m5_a_one_zero_f32: M = 5, coeffs_a = [np.float64(1.0), \
     np.float64(0.0), np.float64(0.5)], fftbins = False"
    expected actual

let cosine_sum_suite =
  [ Alcotest.test_case
      "m_negative (M=-1, a=[np.float64(1.0)], fftbins=False, prec=Float32)"
      `Quick test_m_negative_0
  ; Alcotest.test_case
      "m_zero_f32 (M=0, a=[np.float64(1.0)], fftbins=False, prec=Float32)"
      `Quick test_m_zero_f32_1
  ; Alcotest.test_case "m_zero_f64 (M=0, a=[], fftbins=True, prec=Float64)"
      `Quick test_m_zero_f64_2
  ; Alcotest.test_case
      "m_one_f32 (M=1, a=[np.float64(1.0)], fftbins=False, prec=Float32)" `Quick
      test_m_one_f32_3
  ; Alcotest.test_case
      "m_one_f64_varied_coeffs (M=1, a=[np.float64(0.5), np.float64(0.5)], \
       fftbins=True, prec=Float64)"
      `Quick test_m_one_f64_varied_coeffs_4
  ; Alcotest.test_case
      "sym_m5_a1_f32 (M=5, a=[np.float64(1.0)], fftbins=False, prec=Float32)"
      `Quick test_sym_m5_a1_f32_5
  ; Alcotest.test_case
      "sym_m10_a_half_half_f64 (M=10, a=[np.float64(0.5), np.float64(0.5)], \
       fftbins=False, prec=Float64)"
      `Quick test_sym_m10_a_half_half_f64_6
  ; Alcotest.test_case
      "sym_m8_a_hamm_like_f32 (M=8, a=[np.float64(0.54), np.float64(0.46)], \
       fftbins=False, prec=Float32)"
      `Quick test_sym_m8_a_hamm_like_f32_7
  ; Alcotest.test_case
      "sym_m7_a_multi_f64 (M=7, a=[np.float64(1.0), np.float64(0.2), \
       np.float64(0.05)], fftbins=False, prec=Float64)"
      `Quick test_sym_m7_a_multi_f64_8
  ; Alcotest.test_case
      "sym_m6_a_empty_f32 (M=6, a=[], fftbins=False, prec=Float32)" `Quick
      test_sym_m6_a_empty_f32_9
  ; Alcotest.test_case
      "per_m5_a1_f32 (M=5, a=[np.float64(1.0)], fftbins=True, prec=Float32)"
      `Quick test_per_m5_a1_f32_10
  ; Alcotest.test_case
      "per_m10_a_half_half_f64 (M=10, a=[np.float64(0.5), np.float64(0.5)], \
       fftbins=True, prec=Float64)"
      `Quick test_per_m10_a_half_half_f64_11
  ; Alcotest.test_case
      "per_m8_a_hamm_like_f32 (M=8, a=[np.float64(0.54), np.float64(0.46)], \
       fftbins=True, prec=Float32)"
      `Quick test_per_m8_a_hamm_like_f32_12
  ; Alcotest.test_case
      "per_m7_a_multi_f64 (M=7, a=[np.float64(1.0), np.float64(0.2), \
       np.float64(0.05)], fftbins=True, prec=Float64)"
      `Quick test_per_m7_a_multi_f64_13
  ; Alcotest.test_case
      "per_m6_a_empty_f64 (M=6, a=[], fftbins=True, prec=Float64)" `Quick
      test_per_m6_a_empty_f64_14
  ; Alcotest.test_case
      "sym_m64_a_rect_plus_cosine_f32 (M=64, a=[np.float64(1.0), \
       np.float64(0.3)], fftbins=False, prec=Float32)"
      `Quick test_sym_m64_a_rect_plus_cosine_f32_15
  ; Alcotest.test_case
      "per_m64_a_rect_plus_cosine_f64 (M=64, a=[np.float64(1.0), \
       np.float64(0.3)], fftbins=True, prec=Float64)"
      `Quick test_per_m64_a_rect_plus_cosine_f64_16
  ; Alcotest.test_case
      "sym_m5_a_one_zero_f32 (M=5, a=[np.float64(1.0), np.float64(0.0), \
       np.float64(0.5)], fftbins=False, prec=Float32)"
      `Quick test_sym_m5_a_one_zero_f32_17 ]

let () =
  Alcotest.run "Window.cosine_sum Tests" [("Cosine Sum", cosine_sum_suite)]
