# Inspired by https://github.com/savonet/build-and-test-ocaml-module/blob/main/action.yml
# Thanks for the savonet team for building such an amazing software :p

name: Test

on:
  push:
    branches:
      - 'main'
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest] # , macos-latest, windows-latest]
        ocaml-compiler:
          - "5.3.0" # Latest stable
          - "5.2.0"
        include:
          - os: ubuntu-latest
            ocaml-compiler: "5.3.0"
            send-coverage: true

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up OCaml ${{ matrix.ocaml-compiler }} on ${{ matrix.os }}
        uses: ocaml/setup-ocaml@v3
        with:
          ocaml-compiler: ${{ matrix.ocaml-compiler }}
          dune-cache: true

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12.3' 
      - run: pip install --upgrade pip
      - run: pip install numpy librosa==0.11.0

      # temporary, waiting for the conf-soxr package to be published to opam repo
      - name: Install libsoxr-dev
        run: |
            sudo apt-get update
            sudo apt-get install -y libsoxr-dev
        shell: bash

      - name: Install FFmpeg CLI (to generate test data)
        run: sudo apt-get install -y ffmpeg
        shell: bash

      - name: Install SoundML dependencies (with test)
        run: opam install . --deps-only --with-test --yes --confirm-level=unsafe-yes --verbose
        shell: bash

      - name: Run tests
        if: ${{ matrix.send-coverage }} == false
        run: |
          opam exec -- dune runtest
        shell: bash

      - name: Run tests (and send converage to coveralls)
        if: ${{ matrix.send-coverage }} == true
        run: |
          opam exec -- dune runtest --instrument-with bisect_ppx --force
          opam exec -- bisect-ppx-report send-to Coveralls
        shell: bash
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PULL_REQUEST_NUMBER: ${{ github.event.number }}
